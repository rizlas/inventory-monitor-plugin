# Generated by Django 5.2.5 on 2025-09-12 09:22

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
import utilities.fields
import utilities.json
from django.db import migrations, models


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# inventory_monitor.migrations.0024_copy_to_assigned_object
# inventory_monitor.migrations.0027_generate_rma_from_serial
# inventory_monitor.migrations.0042_rename_abra_to_external_inventory


def copy_to_assigned_object(apps, schema_editor):
    """
    Migrate data from site, device, and location to assigned_object.
    Robust: will create missing ContentType rows if they don't exist yet.
    """
    Asset = apps.get_model("inventory_monitor", "Asset")
    ContentType = apps.get_model("contenttypes", "ContentType")

    # Use get_or_create to be robust in environments where contenttypes rows
    # have not yet been populated for dcim.* models.
    site_ct, _ = ContentType.objects.get_or_create(app_label="dcim", model="site")
    device_ct, _ = ContentType.objects.get_or_create(app_label="dcim", model="device")
    location_ct, _ = ContentType.objects.get_or_create(app_label="dcim", model="location")

    # Migrate site assignments
    for asset in Asset.objects.filter(site__isnull=False):
        asset.assigned_object_type = site_ct
        asset.assigned_object_id = asset.site.id
        asset.save(update_fields=["assigned_object_type", "assigned_object_id"])

    # Migrate location assignments
    for asset in Asset.objects.filter(location__isnull=False):
        asset.assigned_object_type = location_ct
        asset.assigned_object_id = asset.location.id
        asset.save(update_fields=["assigned_object_type", "assigned_object_id"])

    # Migrate device assignments
    for asset in Asset.objects.filter(device__isnull=False):
        asset.assigned_object_type = device_ct
        asset.assigned_object_id = asset.device.id
        asset.save(update_fields=["assigned_object_type", "assigned_object_id"])


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by copying data from assigned_object back to individual fields.
    Resilient: uses get_or_create for ContentType lookups.
    """
    Asset = apps.get_model("inventory_monitor", "Asset")
    ContentType = apps.get_model("contenttypes", "ContentType")

    site_ct, _ = ContentType.objects.get_or_create(app_label="dcim", model="site")
    device_ct, _ = ContentType.objects.get_or_create(app_label="dcim", model="device")
    location_ct, _ = ContentType.objects.get_or_create(app_label="dcim", model="location")

    # Restore site assignments
    for asset in Asset.objects.filter(assigned_object_type=site_ct):
        asset.site_id = asset.assigned_object_id
        asset.save(update_fields=["site_id"])

    # Restore location assignments
    for asset in Asset.objects.filter(assigned_object_type=location_ct):
        asset.location_id = asset.assigned_object_id
        asset.save(update_fields=["location_id"])

    # Restore device assignments
    for asset in Asset.objects.filter(assigned_object_type=device_ct):
        asset.device_id = asset.assigned_object_id
        asset.save(update_fields=["device_id"])


def create_rmas_for_serial_differences(apps, schema_editor):
    """
    For each asset where serial != serial_actual:
    1. Create an RMA record documenting the serial change
    2. Update the asset's serial field to match serial_actual
    """
    Asset = apps.get_model("inventory_monitor", "Asset")
    RMA = apps.get_model("inventory_monitor", "RMA")

    # Find all assets where serial and serial_actual differ
    assets_with_diff = Asset.objects.exclude(serial=models.F("serial_actual"))

    # Create RMA records and update assets
    for asset in assets_with_diff:
        # Skip if either field is empty
        if not asset.serial or not asset.serial_actual:
            continue

        # Create RMA record
        RMA.objects.create(
            asset=asset,
            original_serial=asset.serial,
            replacement_serial=asset.serial_actual,
            status="completed",
            issue_description=f"Automatic RMA created for serial difference: {asset.serial} â†’ {asset.serial_actual}",
        )

        # Update the asset's serial field
        asset.serial = asset.serial_actual
        asset.save(update_fields=["serial"])


def reverse_serial_update(apps, schema_editor):
    """
    No reverse operation is provided as it would be destructive
    """
    pass


def rename_ct_and_perms_forward(apps, schema_editor):
    ContentType = apps.get_model("contenttypes", "ContentType")
    Permission = apps.get_model("auth", "Permission")
    app_label = "inventory_monitor"
    old_model = "abra"
    new_model = "externalinventory"

    new_ct, _ = ContentType.objects.get_or_create(app_label=app_label, model=new_model)
    try:
        old_ct = ContentType.objects.get(app_label=app_label, model=old_model)
    except ContentType.DoesNotExist:
        old_ct = None

    if not old_ct:
        return

    # Update built-in perms; tolerate projects without "view" (older Django).
    for template in ("add_%s", "change_%s", "delete_%s", "view_%s"):
        old_code = template % old_model
        new_code = template % new_model
        # If a new permission already exists, delete it so we can update in-place
        # and preserve the original permission id (keeps existing assignments).
        Permission.objects.filter(content_type=new_ct, codename=new_code).delete()
        try:
            p = Permission.objects.get(content_type=old_ct, codename=old_code)
        except Permission.DoesNotExist:
            continue
        p.codename = new_code
        p.content_type = new_ct
        # Optional: refresh display name if it references the old model.
        p.name = (
            p.name.replace("ABRA", "External inventory")
            .replace("Abra", "External inventory")
            .replace("abra", "external inventory")
        )
        p.save()

    # Remove stale content type to avoid duplicates.
    old_ct.delete()


def rename_ct_and_perms_reverse(apps, schema_editor):
    ContentType = apps.get_model("contenttypes", "ContentType")
    Permission = apps.get_model("auth", "Permission")
    app_label = "inventory_monitor"
    old_model = "externalinventory"
    new_model = "abra"

    new_ct, _ = ContentType.objects.get_or_create(app_label=app_label, model=new_model)
    try:
        old_ct = ContentType.objects.get(app_label=app_label, model=old_model)
    except ContentType.DoesNotExist:
        old_ct = None

    if not old_ct:
        return

    for template in ("add_%s", "change_%s", "delete_%s", "view_%s"):
        old_code = template % old_model
        new_code = template % new_model
        Permission.objects.filter(content_type=new_ct, codename=new_code).delete()
        try:
            p = Permission.objects.get(content_type=old_ct, codename=old_code)
        except Permission.DoesNotExist:
            continue
        p.codename = new_code
        p.content_type = new_ct
        p.save()
    old_ct.delete()


class Migration(migrations.Migration):
    replaces = [
        ("inventory_monitor", "0001_initial"),
        ("inventory_monitor", "0002_contractor_contract"),
        ("inventory_monitor", "0003_alter_contract_price_invmonfileattachment"),
        ("inventory_monitor", "0004_delete_invmonfileattachment"),
        ("inventory_monitor", "0005_invoice"),
        ("inventory_monitor", "0006_invoice_project"),
        ("inventory_monitor", "0007_component_alter_contract_custom_field_data_and_more"),
        ("inventory_monitor", "0008_componentservice_comments"),
        ("inventory_monitor", "0009_alter_component_items"),
        ("inventory_monitor", "0010_componentimport_alter_component_options_and_more"),
        ("inventory_monitor", "0011_alter_component_options_and_more"),
        ("inventory_monitor", "0012_probe_creation_time"),
        ("inventory_monitor", "0013_alter_probe_creation_time"),
        ("inventory_monitor", "0014_contractor_tenant"),
        ("inventory_monitor", "0015_alter_component_table"),
        ("inventory_monitor", "0016_rename_component_to_asset"),
        ("inventory_monitor", "0017_alter_componentservice_options_and_more"),
        ("inventory_monitor", "0018_rma"),
        ("inventory_monitor", "0019_asset_assignment_status"),
        ("inventory_monitor", "0020_asset_lifecycle_status"),
        ("inventory_monitor", "0021_assettype_asset_type"),
        ("inventory_monitor", "0022_alter_assettype_name_and_more"),
        ("inventory_monitor", "0023_asset_assigned_object_id_asset_assigned_object_type"),
        ("inventory_monitor", "0024_copy_to_assigned_object"),
        ("inventory_monitor", "0025_alter_asset_options_remove_asset_device_and_more"),
        ("inventory_monitor", "0026_rename_date_shipped_rma_date_replaced_and_more"),
        ("inventory_monitor", "0027_generate_rma_from_serial"),
        ("inventory_monitor", "0028_alter_asset_options_remove_asset_serial_actual"),
        ("inventory_monitor", "0029_asset_invmon_asset_serial_idx_and_more"),
        ("inventory_monitor", "0030_alter_asset_options_asset_name_and_more"),
        ("inventory_monitor", "0031_abra"),
        ("inventory_monitor", "0032_alter_asset_inventory_item"),
        ("inventory_monitor", "0033_alter_asset_options_remove_asset_inventory_item"),
        ("inventory_monitor", "0034_alter_asset_options"),
        ("inventory_monitor", "0035_alter_asset_options_and_more"),
        ("inventory_monitor", "0036_abra_abra_id"),
        ("inventory_monitor", "0037_abra_abra_id_idx"),
        ("inventory_monitor", "0038_alter_componentservice_options_and_more"),
        ("inventory_monitor", "0039_rename_componentservice_assetservice_and_more"),
        ("inventory_monitor", "0040_rename_activity_code_abra_department_code_and_more"),
        ("inventory_monitor", "0041_alter_asset_options_and_more"),
        ("inventory_monitor", "0042_rename_abra_to_external_inventory"),
        ("inventory_monitor", "0043_rename_fields_and_relations"),
        ("inventory_monitor", "0044_remove_externalinventory_abra_id_idx_and_more"),
        ("inventory_monitor", "0045_normalize_database_object_names"),
    ]

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("dcim", "0153_created_datetimefield"),
        ("dcim", "0167_module_status"),
        ("dcim", "0200_populate_mac_addresses"),
        ("extras", "0073_journalentry_tags_custom_fields"),
        ("extras", "0077_customlink_extend_text_and_url"),
        ("extras", "0084_staging"),
        ("extras", "0122_charfield_null_choices"),
        ("extras", "0123_journalentry_kind_default"),
        ("extras", "0128_tableconfig"),
        ("extras", "0132_configcontextprofile"),
        ("tenancy", "0015_contactassignment_rename_content_type"),
    ]

    operations = [
        migrations.CreateModel(
            name="Probe",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("time", models.DateTimeField()),
                ("device_descriptor", models.CharField(blank=True, max_length=100, null=True)),
                ("site_descriptor", models.CharField(blank=True, max_length=100, null=True)),
                ("location_descriptor", models.CharField(blank=True, max_length=100, null=True)),
                ("part", models.CharField(blank=True, max_length=255, null=True)),
                ("name", models.CharField(max_length=255)),
                ("serial", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("comments", models.TextField(blank=True)),
                ("discovered_data", models.JSONField(blank=True, default=dict)),
                ("category", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "device",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="dcim.device"
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="dcim.location"
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="dcim.site"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                ("creation_time", models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
            ],
            options={
                "ordering": (
                    "name",
                    "serial",
                    "time",
                    "part",
                    "description",
                    "device_descriptor",
                    "device",
                    "site_descriptor",
                    "site",
                    "location_descriptor",
                    "location",
                    "category",
                    "discovered_data",
                ),
            },
        ),
        migrations.CreateModel(
            name="Contractor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255)),
                ("company", models.CharField(blank=True, max_length=255, null=True)),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                ("comments", models.TextField(blank=True)),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contractors",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "ordering": ("name", "company", "address", "comments"),
            },
        ),
        migrations.CreateModel(
            name="Contract",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255)),
                ("name_internal", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=50)),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=19,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("signed", models.DateField(blank=True, null=True)),
                ("accepted", models.DateField(blank=True, null=True)),
                ("invoicing_start", models.DateField(blank=True, null=True)),
                ("invoicing_end", models.DateField(blank=True, null=True)),
                ("comments", models.TextField(blank=True)),
                (
                    "contractor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contracts",
                        to="inventory_monitor.contractor",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcontracts",
                        to="inventory_monitor.contract",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": (
                    "name",
                    "name_internal",
                    "contractor",
                    "type",
                    "price",
                    "signed",
                    "accepted",
                    "invoicing_start",
                    "invoicing_end",
                ),
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255)),
                ("name_internal", models.CharField(max_length=255)),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=19,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("invoicing_start", models.DateField(blank=True, null=True)),
                ("invoicing_end", models.DateField(blank=True, null=True)),
                ("comments", models.TextField(blank=True)),
                (
                    "contract",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="invoices",
                        to="inventory_monitor.contract",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                ("project", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "ordering": ("name", "name_internal", "contract", "price", "invoicing_start", "invoicing_end"),
            },
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("serial", models.CharField(max_length=255)),
                ("serial_actual", models.CharField(max_length=255)),
                ("partnumber", models.CharField(blank=True, max_length=64, null=True)),
                ("asset_number", models.CharField(blank=True, max_length=255, null=True)),
                ("project", models.CharField(blank=True, max_length=32, null=True)),
                ("vendor", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "quantity",
                    models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        max_digits=19,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("warranty_start", models.DateField(blank=True, null=True)),
                ("warranty_end", models.DateField(blank=True, null=True)),
                ("comments", models.TextField(blank=True)),
                (
                    "device",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assets",
                        to="dcim.device",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assets",
                        to="dcim.site",
                    ),
                ),
                (
                    "order_contract",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assets",
                        to="inventory_monitor.contract",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "inventory_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assets",
                        to="dcim.inventoryitem",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assets",
                        to="dcim.location",
                    ),
                ),
                ("assignment_status", models.CharField(default="stocked", max_length=30)),
                ("lifecycle_status", models.CharField(default="new", max_length=30)),
            ],
            options={
                "ordering": (
                    "serial",
                    "serial_actual",
                    "partnumber",
                    "device",
                    "asset_number",
                    "project",
                    "site",
                    "location",
                    "inventory_item",
                    "vendor",
                    "quantity",
                    "price",
                    "order_contract",
                    "warranty_start",
                    "warranty_end",
                ),
                "db_table": "inventory_monitor_asset",
            },
        ),
        migrations.CreateModel(
            name="ComponentService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("service_start", models.DateField(blank=True, null=True)),
                ("service_end", models.DateField(blank=True, null=True)),
                ("service_param", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "service_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("service_category", models.CharField(blank=True, max_length=255, null=True)),
                ("service_category_vendor", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "asset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="services",
                        to="inventory_monitor.asset",
                    ),
                ),
                (
                    "contract",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="services",
                        to="inventory_monitor.contract",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                ("comments", models.TextField(blank=True)),
            ],
            options={
                "ordering": (
                    "service_start",
                    "service_end",
                    "service_param",
                    "service_price",
                    "service_category",
                    "service_category_vendor",
                    "asset",
                    "contract",
                ),
            },
        ),
        migrations.CreateModel(
            name="RMA",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("rma_number", models.CharField(max_length=50, unique=True)),
                ("original_serial", models.CharField(blank=True, max_length=255, null=True)),
                ("replacement_serial", models.CharField(blank=True, max_length=255, null=True)),
                ("status", models.CharField(default="investigating", max_length=30)),
                ("date_issued", models.DateField(blank=True, null=True)),
                ("date_shipped", models.DateField(blank=True, null=True)),
                ("tracking_number", models.CharField(blank=True, max_length=100, null=True)),
                ("issue_description", models.TextField()),
                ("vendor_response", models.TextField(blank=True)),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="rmas", to="inventory_monitor.asset"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "RMA",
                "verbose_name_plural": "RMAs",
                "ordering": ["date_issued"],
            },
        ),
        migrations.CreateModel(
            name="AssetType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("color", utilities.fields.ColorField(blank=True, max_length=6)),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "asset type",
                "verbose_name_plural": "asset types",
                "ordering": ("name",),
            },
        ),
        migrations.AddField(
            model_name="asset",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="assets",
                to="inventory_monitor.assettype",
            ),
        ),
        migrations.AddIndex(
            model_name="assettype",
            index=models.Index(fields=["name"], name="inventory_m_name_a65ffe_idx"),
        ),
        migrations.AddIndex(
            model_name="assettype",
            index=models.Index(fields=["slug"], name="inventory_m_slug_e2f652_idx"),
        ),
        migrations.AddField(
            model_name="asset",
            name="assigned_object_id",
            field=models.PositiveBigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="asset",
            name="assigned_object_type",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to=models.Q(
                    ("app_label", "dcim"), ("model__in", ("site", "location", "rack", "device", "module"))
                ),
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.RunPython(
            code=copy_to_assigned_object,
            reverse_code=reverse_migration,
        ),
        migrations.AlterModelOptions(
            name="asset",
            options={
                "ordering": (
                    "serial",
                    "serial_actual",
                    "partnumber",
                    "asset_number",
                    "project",
                    "inventory_item",
                    "vendor",
                    "quantity",
                    "price",
                    "order_contract",
                    "warranty_start",
                    "warranty_end",
                )
            },
        ),
        migrations.RemoveField(
            model_name="asset",
            name="device",
        ),
        migrations.RemoveField(
            model_name="asset",
            name="location",
        ),
        migrations.RemoveField(
            model_name="asset",
            name="site",
        ),
        migrations.RenameField(
            model_name="rma",
            old_name="date_shipped",
            new_name="date_replaced",
        ),
        migrations.RemoveField(
            model_name="rma",
            name="tracking_number",
        ),
        migrations.AlterField(
            model_name="rma",
            name="rma_number",
            field=models.CharField(blank=True, max_length=100, null=True, unique=True),
        ),
        migrations.RunPython(
            code=create_rmas_for_serial_differences,
            reverse_code=reverse_serial_update,
        ),
        migrations.AlterModelOptions(
            name="asset",
            options={
                "ordering": (
                    "serial",
                    "partnumber",
                    "asset_number",
                    "project",
                    "inventory_item",
                    "vendor",
                    "quantity",
                    "price",
                    "order_contract",
                    "warranty_start",
                    "warranty_end",
                )
            },
        ),
        migrations.RemoveField(
            model_name="asset",
            name="serial_actual",
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["serial"], name="invmon_asset_serial_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["partnumber"], name="invmon_asset_partnumber_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["asset_number"], name="invmon_asset_assetnum_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["assignment_status"], name="invmon_asset_assign_status_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["lifecycle_status"], name="invmon_asset_lifecycle_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["vendor"], name="invmon_asset_vendor_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["project"], name="invmon_asset_project_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["warranty_start"], name="invmon_asset_warr_start_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["warranty_end"], name="invmon_asset_warr_end_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["assigned_object_type", "assigned_object_id"], name="invmon_asset_assigned_obj_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="probe",
            index=models.Index(fields=["serial"], name="invmon_probe_serial_idx"),
        ),
        migrations.AddIndex(
            model_name="probe",
            index=models.Index(fields=["time"], name="invmon_probe_time_idx"),
        ),
        migrations.AddIndex(
            model_name="probe",
            index=models.Index(fields=["serial", "time"], name="invmon_probe_serial_time_idx"),
        ),
        migrations.AlterModelOptions(
            name="asset",
            options={
                "ordering": (
                    "name",
                    "serial",
                    "partnumber",
                    "asset_number",
                    "project",
                    "inventory_item",
                    "vendor",
                    "quantity",
                    "price",
                    "order_contract",
                    "warranty_start",
                    "warranty_end",
                )
            },
        ),
        migrations.AddField(
            model_name="asset",
            name="name",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["name"], name="invmon_asset_name_idx"),
        ),
        migrations.CreateModel(
            name="ExternalInventory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("inventory_number", models.CharField(max_length=64)),
                ("name", models.CharField(max_length=255)),
                ("serial_number", models.CharField(blank=True, max_length=255, null=True)),
                ("person_id", models.CharField(blank=True, max_length=64, null=True)),
                ("person_name", models.CharField(blank=True, max_length=255, null=True)),
                ("location_code", models.CharField(blank=True, max_length=64, null=True)),
                ("location", models.CharField(blank=True, max_length=255, null=True)),
                ("department_code", models.CharField(blank=True, max_length=64, null=True)),
                ("project_code", models.CharField(blank=True, max_length=64, null=True)),
                ("external_id", models.CharField(blank=True, db_index=True, max_length=64, null=True, unique=True)),
                ("user_name", models.CharField(blank=True, max_length=255, null=True)),
                ("user_note", models.TextField(blank=True, null=True)),
                ("split_asset", models.CharField(blank=True, null=True)),
                ("status", models.CharField(blank=True, null=True)),
                (
                    "assets",
                    models.ManyToManyField(
                        blank=True, related_name="external_inventory_assets", to="inventory_monitor.asset"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "External Inventory Asset",
                "verbose_name_plural": "External Inventory Assets",
                "ordering": ("inventory_number", "name"),
                "indexes": [
                    models.Index(fields=["inventory_number"], name="ext_inv_invnum_idx"),
                    models.Index(fields=["serial_number"], name="ext_inv_serial_idx"),
                    models.Index(fields=["person_id"], name="ext_inv_personid_idx"),
                    models.Index(fields=["location_code"], name="ext_inv_loccode_idx"),
                    models.Index(fields=["department_code"], name="ext_inv_deptcode_idx"),
                    models.Index(fields=["project_code"], name="ext_inv_projcode_idx"),
                    models.Index(fields=["external_id"], name="ext_inv_id_idx"),
                    models.Index(fields=["status"], name="ext_inv_status_idx"),
                ],
            },
        ),
        migrations.AlterField(
            model_name="asset",
            name="inventory_item",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="assets",
                to="dcim.inventoryitem",
            ),
        ),
        migrations.AlterModelOptions(
            name="asset",
            options={
                "ordering": (
                    "name",
                    "serial",
                    "partnumber",
                    "asset_number",
                    "project",
                    "vendor",
                    "quantity",
                    "price",
                    "order_contract",
                    "warranty_start",
                    "warranty_end",
                )
            },
        ),
        migrations.RemoveField(
            model_name="asset",
            name="inventory_item",
        ),
        migrations.AlterModelOptions(
            name="asset",
            options={
                "ordering": (
                    "partnumber",
                    "serial",
                    "description",
                    "asset_number",
                    "project",
                    "vendor",
                    "quantity",
                    "price",
                    "order_contract",
                    "warranty_start",
                    "warranty_end",
                )
            },
        ),
        migrations.RemoveIndex(
            model_name="asset",
            name="invmon_asset_name_idx",
        ),
        migrations.RenameField(
            model_name="asset",
            old_name="name",
            new_name="description",
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["description"], name="invmon_asset_desc_idx"),
        ),
        migrations.AlterModelOptions(
            name="componentservice",
            options={
                "ordering": (
                    "service_start",
                    "service_end",
                    "service_price",
                    "service_category",
                    "service_category_vendor",
                    "asset",
                    "contract",
                )
            },
        ),
        migrations.RemoveField(
            model_name="componentservice",
            name="service_param",
        ),
        migrations.RenameModel(
            old_name="ComponentService",
            new_name="AssetService",
        ),
        migrations.AlterModelOptions(
            name="asset",
            options={
                "ordering": (
                    "partnumber",
                    "serial",
                    "description",
                    "project",
                    "vendor",
                    "quantity",
                    "price",
                    "order_contract",
                    "warranty_start",
                    "warranty_end",
                )
            },
        ),
        migrations.RemoveIndex(
            model_name="asset",
            name="invmon_asset_assetnum_idx",
        ),
        migrations.RemoveField(
            model_name="asset",
            name="asset_number",
        ),
    ]
